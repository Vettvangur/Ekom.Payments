namespace Ekom.Payments.AltaPay.Model;
/// <summary>
/// Represents the details of a payment transaction.
/// </summary>
public class Response
{
    /// <summary>
    /// Unique identifier for the payment that was done through a hosted checkout.
    /// </summary>
    public string? CheckoutReference { get; set; }

    /// <summary>
    /// Unique identifier for the transaction generated by the payment service provider.
    /// </summary>
    public string PayfacReference { get; set; }

    /// <summary>
    /// The identifier for the transaction provided by you, the merchant, allowing for correlation with the merchant’s system.
    /// </summary>
    public string? MerchantReference { get; set; }

    /// <summary>
    /// The transaction amount in the minor currency unit.
    /// </summary>
    public string Amount { get; set; }

    /// <summary>
    /// The three-letter ISO currency code.
    /// </summary>
    public string Currency { get; set; }

    /// <summary>
    /// A field that provides additional context in case of transaction errors or declines, helping diagnose specific issues.
    /// </summary>
    public string? Reason { get; set; }

    /// <summary>
    /// Indicates the transaction status (true/false).
    /// </summary>
    public string Success { get; set; }

    /// <summary>
    /// A cryptographic signature generated using a secret, enabling verification of the message authenticity and ensuring it hasn’t been tampered with/
    /// </summary>
    public string HmacSignature { get; set; }

    /// <summary>
    /// An object for the additional details included in the event.
    /// </summary>
    public PaymentEventDetails AdditionalData { get; set; }
}


/// <summary>
/// Represents the details of a payment event.
/// </summary>
public class PaymentEventDetails
{
    /// <summary>
    /// A string representing the type of event that occurred. (Authorization/Capture/Adjustment/Refund)
    /// </summary>
    public PaymentEvent EventType { get; set; }

    /// <summary>
    /// The source of funds used for a transaction. (nullable string)
    /// </summary>
    public string? CardUsage { get; set; }

    /// <summary>
    /// A partially masked PAN. (nullable string)
    /// </summary>
    public string? CardNumber { get; set; }

    /// <summary>
    /// Indicates if 3D Secure authentication was completed for this payment. (nullable string)
    /// </summary>
    public string? ThreeDAuthenticated { get; set; }

    /// <summary>
    /// This field indicates the payment request associated with the original payment. (nullable string)
    /// </summary>
    public string? OriginalPayfacReference { get; set; }

    /// <summary>
    /// The payment method used in the transaction. (nullable string)
    /// </summary>
    public string? PaymentMethod { get; set; }

    /// <summary>
    /// Last 4 digits of PAN. (nullable string)
    /// </summary>
    public string? CardSummary { get; set; }

    /// <summary>
    /// An authorization code is a unique series of letters or numbers generated by a card issuer or bank to validate a card transaction. (nullable string)
    /// </summary>
    public string? AuthCode { get; set; }

    /// <summary>
    /// A payment token you can use for future payments through API. You will only get this field through the Tokenization event. (nullable string)
    /// </summary>
    public string? Token { get; set; }

}

/// <summary>
/// Represents different types of payment events.
/// </summary>
public enum PaymentEvent
{
    /// <summary>
    /// This event indicates that funds have been reserved from the customer's account for a specific amount. If no specific capture action is set, the system will automatically capture the authorized funds after a short period. In that case we will not send Capture event.
    /// </summary>
    Authorization,

    /// <summary>
    /// This event confirms that the authorized funds have been withdrawn from the customer's account.
    /// </summary>
    Capture,

    /// <summary>
    /// This event represents a modification to the authorized amount, either increasing or decreasing it.
    /// </summary>
    Adjustment,

    /// <summary>
    /// This event represents a notification that the refund is processed. It can take up to 40 business days for the funds to be returned to the customer's account, depending on the payment method.
    /// </summary>
    Refund,

    /// <summary>
    /// This event represents a notification for when a tokenization request has been successfully completed.
    /// </summary>
    Tokenization
}

public class AuthenticationResponse
{
    public string Token { get; set; }
}

